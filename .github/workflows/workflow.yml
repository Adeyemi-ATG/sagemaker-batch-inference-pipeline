name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  TF_ROOT: .
  TF_STATE_NAME: ${{ github.ref_name }}
  CACHE_FALLBACK_KEY: "test-state"
  LAMBDA_FILE_NAME: "lambda_function_payload.zip"
  GIT_CLEAN_FLAGS: "none"
  REGION: "u-west-2"  # Modify as needed
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
  AWS_DEFAULT_REGION: u-west-2

jobs:
  buildpipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          sudo ./aws/install --update
          pip3 install boto3 sagemaker pandas pyyaml

      - name: Execute pipeline scripts
        run: |
          export AWS_DEFAULT_REGION=${{ env.REGION }}
          aws sagemaker list-domains
          python3 ./pipeline_scripts/train_monitor_pipeline.py
          python3 ./pipeline_scripts/hpo_with_monitor_pipeline.py
          python3 ./pipeline_scripts/inference_with_monitor_pipeline.py

  zip_lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install zip
        run: sudo apt-get install -y zip

      - name: Zip lambda function
        run: zip -j ${{ env.LAMBDA_FILE_NAME }} code/lambda_function/index.py

      - name: Upload Lambda zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda_function_payload
          path: ${{ env.LAMBDA_FILE_NAME }}

  init_and_validate:
    runs-on: ubuntu-latest
    needs: zip_lambda
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Lambda zip artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda_function_payload
          path: ${{ env.TF_ROOT }}

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

  plan:
    runs-on: ubuntu-latest
    needs: init_and_validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Lambda zip artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda_function_payload
          path: ${{ env.TF_ROOT }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Terraform Plan
        run: terraform plan -var-file env_files/dev_env.tfvars

      - name: Terraform Plan JSON
        run: terraform plan -out=tfplan && terraform show -json tfplan > plan.json

      - name: Upload Terraform Plan JSON
        uses: actions/upload-artifact@v2
        with:
          name: plan
          path: plan.json

  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Lambda zip artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda_function_payload
          path: ${{ env.TF_ROOT }}

      - name: Terraform Apply
        run: terraform apply -auto-approve

  destroy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Lambda zip artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda_function_payload
          path: ${{ env.TF_ROOT }}

      - name: Terraform Plan Destroy
        run: terraform plan -destroy -out=tfplan

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
