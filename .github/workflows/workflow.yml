name: Terraform CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TEST }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TEST }}
  AWS_DEFAULT_REGION: eu-west-2
  LAMBDA_FILE_NAME: lambda_function_payload.zip

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python and AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip unzip
          pip3 install boto3 sagemaker pandas pyyaml
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

  pipeline:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3

      - name: Run pipeline scripts
        run: |
          export AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}
          python3 -m pip install boto3 sagemaker pandas pyyaml  # Ensure libraries are installed
          python3 ./pipeline_scripts/train_monitor_pipeline.py
          python3 ./pipeline_scripts/hpo_with_monitor_pipeline.py
          python3 ./pipeline_scripts/inference_with_monitor_pipeline.py

  validate:
    runs-on: ubuntu-latest
    needs: pipeline
    steps:
      - uses: actions/checkout@v3

      - name: Install zip tool
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Create Lambda function zip
        run: |
          cd code/lambda_function
          zip -j "${GITHUB_WORKSPACE}/${{ env.LAMBDA_FILE_NAME }}" index.py
          # Create the ZIP file in the root directory

      - name: Verify ZIP file existence
        run: |
          ls -la "${GITHUB_WORKSPACE}"
          # Verify the ZIP file is in the root directory

      - name: Validate Terraform configuration
        run: |
          cd "${GITHUB_WORKSPACE}"  # Move to the root directory
          terraform init
          terraform validate

  build:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3

      - name: Install jq (for Terraform action)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Recreate Lambda function zip
        run: |
          cd code/lambda_function
          zip -j "${GITHUB_WORKSPACE}/${{ env.LAMBDA_FILE_NAME }}" index.py
          # Recreate the ZIP file in the root directory

      - name: Verify ZIP file before Terraform plan
        run: |
          ls -la "${GITHUB_WORKSPACE}"
          # This should confirm that the ZIP file is still present in the root directory

      - name: Create Terraform plan
        run: |
          cd "${GITHUB_WORKSPACE}"  # Move to the root directory
          terraform init
          terraform plan -var-file=env_files/dev_env.tfvars

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Recreate Lambda function zip
        run: |
          cd code/lambda_function
          zip -j "${GITHUB_WORKSPACE}/lambda_function_payload.zip" index.py
          # Recreate the ZIP file in the root directory

      - name: Verify ZIP file before Terraform apply
        run: |
          ls -la "${GITHUB_WORKSPACE}"
          # This should confirm that the ZIP file is still present in the root directory

      - name: Reinitialize Terraform
        run: |
          terraform init -reconfigure # # Reinitialize Terraform with reconfiguration

      - name: Apply Terraform plan
        run: terraform apply -var-file=env_files/dev_env.tfvars -auto-approve

  destroy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Recreate Lambda function zip
        run: |
          cd code/lambda_function
          zip -j "${GITHUB_WORKSPACE}/lambda_function_payload.zip" index.py
          # Recreate the ZIP file in the root directory

      - name: Verify ZIP file before Terraform destroy
        run: |
          ls -la "${GITHUB_WORKSPACE}"
          # This should confirm that the ZIP file is still present in the root directory

      - name: Reinitialize Terraform
        run: |
          terraform init  # Reinitialize Terraform to ensure a consistent environment

      - name: Destroy infrastructure
        run: terraform destroy -var-file=env_files/dev_env.tfvars -auto-approve




